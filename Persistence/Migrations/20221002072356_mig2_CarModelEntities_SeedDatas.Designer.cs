// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RentACarDbContext))]
    [Migration("20221002072356_mig2_CarModelEntities_SeedDatas")]
    partial class mig2_CarModelEntities_SeedDatas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BrandName");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5901bbfb-8007-46c5-9fe7-8f7f5cabdd72"),
                            BrandName = "BMW"
                        },
                        new
                        {
                            Id = new Guid("2b982286-7595-450a-a526-9fd57e1b787b"),
                            BrandName = "Mercedes-Benz"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("CarState")
                        .HasColumnType("integer")
                        .HasColumnName("CarState");

                    b.Property<float>("DailyPrice")
                        .HasColumnType("real")
                        .HasColumnName("DailyPrice");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageURL");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<int>("ModelYear")
                        .HasColumnType("integer")
                        .HasColumnName("ModelYear");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b2cc23-4768-496a-ab37-be911b02d697"),
                            CarState = 0,
                            DailyPrice = 1000f,
                            ImageURL = " ",
                            ModelId = new Guid("acdaf1bf-fcba-4167-af9c-d7c9cddce821"),
                            ModelYear = 2020
                        },
                        new
                        {
                            Id = new Guid("46017c0a-9f3d-429a-ab02-70b6ea686310"),
                            CarState = 0,
                            DailyPrice = 800f,
                            ImageURL = " ",
                            ModelId = new Guid("43c6c771-89e4-4ff1-a6bc-0cc715cebe47"),
                            ModelYear = 2021
                        },
                        new
                        {
                            Id = new Guid("2fd9af93-9787-4fe9-b2cc-1f439cfbf121"),
                            CarState = 0,
                            DailyPrice = 800f,
                            ImageURL = " ",
                            ModelId = new Guid("1de0d0be-aabc-4dae-88fd-97c4ac876771"),
                            ModelYear = 2022
                        });
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ModelName");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("acdaf1bf-fcba-4167-af9c-d7c9cddce821"),
                            BrandId = new Guid("5901bbfb-8007-46c5-9fe7-8f7f5cabdd72"),
                            ModelName = "Series 4"
                        },
                        new
                        {
                            Id = new Guid("43c6c771-89e4-4ff1-a6bc-0cc715cebe47"),
                            BrandId = new Guid("5901bbfb-8007-46c5-9fe7-8f7f5cabdd72"),
                            ModelName = "Series 3"
                        },
                        new
                        {
                            Id = new Guid("1de0d0be-aabc-4dae-88fd-97c4ac876771"),
                            BrandId = new Guid("2b982286-7595-450a-a526-9fd57e1b787b"),
                            ModelName = "A 180"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Car", b =>
                {
                    b.HasOne("Domain.Entities.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Domain.Entities.Model", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Models");
                });
#pragma warning restore 612, 618
        }
    }
}
